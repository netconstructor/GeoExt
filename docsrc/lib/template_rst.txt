.. currentmodule:: Full

:class:`Full.ClassName`
=======================

.. class:: ClassName(config)

    Create a specialized ``Ext.Foo`` that creates objects for use in
    a :class:`Full.OtherClass`.

    .. rubric:: Extends
    
    * `Ext.Foo`_ 

.. _`Ext.Foo`: http://extjs.com/deploy/dev/docs/?class=Ext.Foo

Example Use
-----------

Sample code to create a thing:

.. code-block:: javascript
    
    var thing = new Full.ClassName({
        title: 'My Thing',
        collapsible: true
    });


Config Options
--------------

Configuration properties in addition to those listed for `Ext.Foo`_.

.. describe:: anchored

    ``Boolean``  The thing begins anchored to a location.  Default is false.
    
.. describe:: doMagic

    ``Function``  Do some magic.

.. describe:: location

    ``OpenLayers.LonLat``  A location that serves as the thing's anchor.


Public Properties
-----------------

Properties in addition to those listed for `Ext.Foo`_.

.. attribute:: ClassName.location

    ``OpenLayers.LonLat`` The anchor location.


Public Methods
--------------

Public methods in addition to those listed for `Ext.Foo`_.

.. method:: ClassName.doSomething(first [, second])

    :param first:  ``String``  The first argument.  If the description runs on
        for a few lines, make sure to indent all after the first.
    
    :param second:  :class:`Full.SomeClass`  The optional second argument
    
    :returns:  ``Number``  The number of things done.
    
    This method does something.  The description of what it does goes here.  And
    continues on subsequent lines with the same indentation.
    

Events
------

Events in addition to those listed for `Ext.Foo`_.

.. describe:: somethingdone

    Fired when something is done.
